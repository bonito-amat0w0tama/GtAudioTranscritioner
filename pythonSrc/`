import numpy as np
import Utils
import pylab as plt 
import scipy.linalg as sl
import scipy.signal as sig
from NMFPloter import *

nu = Utils.NMFUtils
ploter = NMFPloter()

stpath = "../../jsonData/st/5st_2014-1-10-20:54.json"
st = nu.readJson(path=stpath)
st = nu.json2NpArray(st)

V = st['V']
W = st['W']
H = st['H']
SW = st['SW']
SH = st['SH']
Wp = sl.pinv(SW) 

#list = []
#for h in SH:
#    max = np.amax(h)
#    if max > 1.0:
#        list.append(h)
#
#nRows = len(list)
#nCols = SH.shape[1]
#A = np.zeros([nRows, nCols])
#print A
#
#for i in range(len(list)):
#    A[i,:] = list[i]
#
#indexArray = np.array(SH.shape[1], np.bool)
#for i in SH:
#    index = np.index(np.max(i)) 
#    indexArray[index] = True
#
#
#print indexArray

#for v in SH:

xs = np.arange(0, 3 * np.pi, 0.05)
#data = np.sin(xs) 
data = SW[:,0]


def findPeak(data, min=0):
    peak = []

    for i in range(len(data)):
        if i-1 > 0 and i+1 < len(data):
            pre = data[i-1]
            now = data[i] 
            next = data[i+1]
            if pre < now and now > next and now > min:
                peak.append(i)
    return peak

def findPeak2(data):
    peak = []
    d = np.diff(data)
    ran = range(len(d))

    for i in ran:
        if i+1 < len(d):
            now = d[i] 
            next = d[i+1]
            if now * next <= 0 and now > next:
                peak.append(i+1)
    return peak

print str(findPeak(data=data, min=np.max(data) * 0.1)) + "\n"

#print findPeak2(data=data)
print np.argmax(data)

#print sig.find_peaks_cwt(data, np.arange(1, 10))

print np.diff(data)

plt.plot(np.diff(data)[0:100])
#plt.plot(SW[:,0])



#ploter.createBasisGraph(data=SW)
#ploter.createCoefGraph(data=SH, lim=True, ymin=0)

plt.show()
